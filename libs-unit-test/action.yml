name: Library unit test
description: Build and test internal Library
inputs:
  working-directory:
    required: true
    description: Which library to build
  check_name:
    required: true
    description: Name which is displayed in test results

runs:
    using: 'composite'
    steps:
    - name: Detect CMake and Conan scripts
      run: |
        chmod +x ${{github.action_path}}/detect-executable.sh
        ${{github.action_path}}/detect-executable.sh ${{inputs.working-directory}} >> "$GITHUB_ENV"
      shell: bash

    - name: Assert info detected
      if: ${{env.cmake_found != 'True' || env.conan_found != 'True' || env.executable == ''}}
      uses: actions/github-script@v7
      with:
        script: core.setFailed('Executable not detected in CMakeLists.txt, or CMakeLists.txt is missing, or conanfile is missing')

    - name: Conan install
      run: conan install . --output-folder build --build=missing
      working-directory: ${{inputs.working-directory}}
      shell: bash

    - name: CMake install
      run: cmake -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" . -B cmake-build-release
      working-directory: ${{inputs.working-directory}}
      shell: bash

    - name: CMake build
      run: cmake  --build ./cmake-build-release
      working-directory: ${{inputs.working-directory}}
      shell: bash

    - name: Run tests
      run: ./cmake-build-release/${{env.executable}} --gtest_output="xml:./cmake-build-release/gtest-report.xml"
      working-directory: ${{inputs.working-directory}}
      shell: bash

    - name: Publish Test Report
      # Now collect the results and report the failures, if present
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always() # always run even if the previous step fails
      with:
        files: '**/gtest-report.xml'
        check_name: ${{inputs.check_name}}
